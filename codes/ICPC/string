void naiveMatching() {
for (int i = 0; i < n; i++) {
// try all potential starting indices
bool found = true;
for (int j = 0; j < m && found; j++)
// use boolean flag ‘found’
if (i + j >= n || P[j] != T[i + j])
// if mismatch found
found = false;
// abort this, shift the starting index i by +1
if (found)
// if P[0..m-1] == T[i..i+m-1]
printf("P is found at index %d in T\n", i);
} }



for (int k = 0; k < n; k++) {
length[k] = 1;
for (int i = 0; i < k; i++) {
if (array[i] < array[k]) {
length[k] = max(length[k],length[i]+1);
}
}
}


